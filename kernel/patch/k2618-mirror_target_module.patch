diff -Nrup linux-2.6.18-old/include/linux/netfilter_ipv4/ipt_MIRROR.h linux-2.6.18-new/include/linux/netfilter_ipv4/ipt_MIRROR.h
--- linux-2.6.18-old/include/linux/netfilter_ipv4/ipt_MIRROR.h	1970-01-01 08:00:00.000000000 +0800
+++ linux-2.6.18-new/include/linux/netfilter_ipv4/ipt_MIRROR.h	2007-01-19 02:00:47.000000000 +0800
@@ -0,0 +1,14 @@
+#ifndef _IPT_MIRROR_H
+#define _IPT_MIRROR_H
+
+#define MIRROR_SINF	0x01
+#define MIRROR_DINF	0x02
+#define MIRROR_DROP	0x04
+
+struct ipt_mirror_info{
+	char sinf[6];
+	char dinf[6];
+	char dropflag;
+};
+
+#endif
diff -Nrup linux-2.6.18-old/net/ipv4/netfilter/ipt_MIRROR.c linux-2.6.18-new/net/ipv4/netfilter/ipt_MIRROR.c
--- linux-2.6.18-old/net/ipv4/netfilter/ipt_MIRROR.c	1970-01-01 08:00:00.000000000 +0800
+++ linux-2.6.18-new/net/ipv4/netfilter/ipt_MIRROR.c	2007-01-19 02:01:29.000000000 +0800
@@ -0,0 +1,92 @@
+#include <linux/module.h>
+#include <linux/skbuff.h>
+#include <linux/ip.h>
+
+#include <linux/netfilter_ipv4/ip_tables.h>
+#include <linux/netfilter_ipv4/ipt_MIRROR.h>
+#include <linux/netdevice.h>
+#include <net/ip.h>
+#include <linux/errno.h>
+#include <asm/atomic.h>
+
+#ifndef DEBUG
+//#define DEBUG 
+#endif
+
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("You-Sin Yang <prophet@chu.edu.tw>");
+MODULE_DESCRIPTION("iptables mirroring mangling module");
+
+static unsigned int
+target(struct sk_buff **pskb,
+       const struct net_device *in,
+       const struct net_device *out,
+       unsigned int hooknum,
+       const struct xt_target *target,
+       const void *targinfo,
+       void *userinfo)
+{
+	const struct ipt_mirror_info *info = targinfo;
+	struct sk_buff *skb = *pskb;
+	struct net_device *target_dev, *source_dev;
+	struct sk_buff *newsb = skb_copy(skb, GFP_ATOMIC);
+	if (! info) return NF_ACCEPT;
+	if (! newsb) return NF_ACCEPT;
+	source_dev = dev_get_by_name(info->sinf);	
+	target_dev = dev_get_by_name(info->dinf);	
+	if (!target_dev || !source_dev) return NF_ACCEPT;
+	if (hooknum == NF_IP_PRE_ROUTING || hooknum == NF_IP_LOCAL_IN){
+		if (! strcmp(source_dev->name, in->name)){
+			newsb->dev = target_dev;
+			skb_push(newsb, ETH_HLEN);
+			dev_queue_xmit(newsb);
+#ifdef DEBUG
+			printk("Mirror packet recv from %d.%d.%d.%d to %d.%d.%d.%d sinf=%s dinf=%s direction=IN\n", NIPQUAD(newsb->nh.iph->saddr),NIPQUAD(newsb->nh.iph->daddr),in->name, newsb->dev->name);
+#endif
+		}
+	}else if(hooknum == NF_IP_POST_ROUTING || hooknum == NF_IP_LOCAL_OUT){
+		if (! strcmp(source_dev->name, out->name)){
+			newsb->dev = target_dev;
+			skb_push(newsb, ETH_HLEN);
+			dev_queue_xmit(newsb);
+#ifdef DEBUG
+			printk("Mirror packet send from %d.%d.%d.%d to %d.%d.%d.%d sinf=%s dinf=%s direction=OUT\n", NIPQUAD(newsb->nh.iph->saddr),NIPQUAD(newsb->nh.iph->daddr),out->name, newsb->dev->name);
+#endif
+		}
+	}
+	return NF_ACCEPT;
+}
+
+static int
+checkentry(const char *tablename,
+           const void *e_void,
+           const struct xt_target *target,
+           void *targinfo,
+           unsigned int targinfosize,
+           unsigned int hook_mask)
+{
+	return 1;
+}
+
+static struct ipt_target ipt_MIRROR = {
+        .name           = "MIRROR",
+        .target         = target,
+        .targetsize     = sizeof(struct ipt_mirror_info),
+        //.table          = "mangle",
+        .checkentry     = checkentry,
+        .me             = THIS_MODULE,
+};
+
+static int __init ipt_mirror_init(void)
+{
+        return ipt_register_target(&ipt_MIRROR);
+}
+
+static void __exit ipt_mirror_fini(void)
+{
+        ipt_unregister_target(&ipt_MIRROR);
+}
+
+module_init(ipt_mirror_init);
+module_exit(ipt_mirror_fini);
+
diff -Nrup linux-2.6.18-old/net/ipv4/netfilter/Kconfig linux-2.6.18-new/net/ipv4/netfilter/Kconfig
--- linux-2.6.18-old/net/ipv4/netfilter/Kconfig	2007-01-19 01:41:44.000000000 +0800
+++ linux-2.6.18-new/net/ipv4/netfilter/Kconfig	2007-01-19 02:01:36.000000000 +0800
@@ -85,7 +85,6 @@ config IP_NF_CONNTRACK_NETLINK
 	help
 	  This option enables support for a netlink-based userspace interface
 
-
 config IP_NF_CT_PROTO_SCTP
 	tristate  'SCTP protocol connection tracking support (EXPERIMENTAL)'
 	depends on IP_NF_CONNTRACK && EXPERIMENTAL
@@ -181,7 +180,7 @@ config IP_NF_PPTP
 	  net/ipv4/netfilter/ip_conntrack_pptp.c
 	
 	  If you want to compile it as a module, say M here and read
-	  Documentation/modules.txt.  If unsure, say `N'.
+	  Documentation/modules.txt.  If unsure, say N
 
 config IP_NF_H323
 	tristate  'H.323 protocol support (EXPERIMENTAL)'
@@ -342,7 +341,7 @@ config IP_NF_MATCH_ADDRTYPE
 	  eg. UNICAST, LOCAL, BROADCAST, ...
 	
 	  If you want to compile it as a module, say M here and read
-	  <file:Documentation/modules.txt>.  If unsure, say `N'.
+	  <file:Documentation/modules.txt>.  If unsure, say 'N'.
 
 config IP_NF_MATCH_HASHLIMIT
 	tristate  'hashlimit match support'
@@ -397,7 +396,7 @@ config IP_NF_TARGET_ULOG
 	  which has been obsoleted by the new "nfnetlink_log" code (see
 	  CONFIG_NETFILTER_NETLINK_LOG).
 
-	  This option adds a `ULOG' target, which allows you to create rules in
+	  This option adds a 'ULOG' target, which allows you to create rules in
 	  any iptables table. The packet is passed to a userspace logging
 	  daemon using netlink multicast sockets; unlike the LOG target
 	  which can only be viewed through syslog.
@@ -433,6 +432,12 @@ config IP_NF_TARGET_TCPMSS
 
 	  To compile it as a module, choose M here.  If unsure, say N.
 
+config IP_NF_TARGET_MIRROR
+	tristate  'Connection mirror support'
+	depends on IP_NF_CONNTRACK
+	help
+	  Help yourself
+
 # NAT + specific targets
 config IP_NF_NAT
 	tristate "Full NAT"
@@ -632,7 +637,7 @@ config IP_NF_RAW
 	  and OUTPUT chains.
 	
 	  If you want to compile it as a module, say M here and read
-	  <file:Documentation/modules.txt>.  If unsure, say `N'.
+	  <file:Documentation/modules.txt>.  If unsure, say 'N'.
 
 # ARP tables
 config IP_NF_ARPTABLES
@@ -649,7 +654,7 @@ config IP_NF_ARPFILTER
 	tristate "ARP packet filtering"
 	depends on IP_NF_ARPTABLES
 	help
-	  ARP packet filtering defines a table `filter', which has a series of
+	  ARP packet filtering defines a table 'filter', which has a series of
 	  rules for simple ARP packet filtering at local input and
 	  local output.  On a bridge, you can also specify filtering rules
 	  for forwarded ARP packets. See the man page for arptables(8).
diff -Nrup linux-2.6.18-old/net/ipv4/netfilter/Makefile linux-2.6.18-new/net/ipv4/netfilter/Makefile
--- linux-2.6.18-old/net/ipv4/netfilter/Makefile	2007-01-19 01:41:44.000000000 +0800
+++ linux-2.6.18-new/net/ipv4/netfilter/Makefile	2007-01-19 02:01:48.000000000 +0800
@@ -81,6 +81,7 @@ obj-$(CONFIG_IP_NF_TARGET_ULOG) += ipt_U
 obj-$(CONFIG_IP_NF_TARGET_TCPMSS) += ipt_TCPMSS.o
 obj-$(CONFIG_IP_NF_TARGET_CLUSTERIP) += ipt_CLUSTERIP.o
 obj-$(CONFIG_IP_NF_TARGET_TTL) += ipt_TTL.o
+obj-$(CONFIG_IP_NF_TARGET_MIRROR) += ipt_MIRROR.o
 
 # generic ARP tables
 obj-$(CONFIG_IP_NF_ARPTABLES) += arp_tables.o
